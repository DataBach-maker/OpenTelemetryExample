[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\arian\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\arian\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.11.3 (Oracle Corporation Java 17.0.12)
[debug]       Load.loadUnit: plugins took 51.6794ms
[debug]       Load.loadUnit: defsScala took 0.1335ms
[debug] [Loading] Scanning directory C:\Users\arian\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arian\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 8.2741 ms
[debug]           Load.resolveProject(global-plugins) took 19.1145ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\arian\.sbt\1.0\plugins, plugins: List(<none>))) took 36.183ms
[debug] [Loading] Done in C:\Users\arian\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 45.6707ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.0901ms
[debug]     Load.loadUnit(file:/C:/Users/arian/.sbt/1.0/plugins/, ...) took 101.67ms
[debug]   Load.apply: load took 207.0971ms
[debug]   Load.apply: resolveProjects took 3.0145ms
[debug]   Load.apply: finalTransforms took 41.5224ms
[debug]   Load.apply: config.delegates took 9.042ms
[debug]   Load.apply: Def.make(settings)... took 384.3331ms
[debug]   Load.apply: structureIndex took 116.3389ms
[debug]   Load.apply: mkStreams took 5.0755ms
[info] loading global plugins from C:\Users\arian\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1729.0565ms
[debug]           Load.loadUnit: plugins took 22.522ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation\project
[debug]             Load.loadUnit: mkEval took 4.4843ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2031 ms
[info] loading settings for project scalainstrumentation-build from idea1.sbt...
[debug]               Load.resolveProject(scalainstrumentation-build) took 3.1918ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalainstrumentation-build, base: C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation\project, plugins: List(<none>))) took 5.9426ms
[debug] [Loading] Done in C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation\project, returning: (scalainstrumentation-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2008.0888ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.7213ms
[debug]         Load.loadUnit(file:/C:/Users/arian/Development/OpenTelemetryExample/ScalaInstrumentation/project/, ...) took 2034.8704ms
[debug]       Load.apply: load took 2035.7605ms
[debug]       Load.apply: resolveProjects took 0.3312ms
[debug]       Load.apply: finalTransforms took 11.1243ms
[debug]       Load.apply: config.delegates took 0.424ms
[debug]       Load.apply: Def.make(settings)... took 43.9478ms
[debug]       Load.apply: structureIndex took 20.0414ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2908.0724ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation
[debug]       Load.loadUnit: mkEval took 0.5673ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.GenerateAllManagedSourcesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.GenerateAllManagedSourcesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.jetbrains.sbt.GenerateAllManagedSourcesPlugin,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2444 ms
[info] loading settings for project root from build.sbt...
[debug]         Load.resolveProject(root) took 90.2579ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation, plugins: List(<none>))) took 92.7486ms
[debug] [Loading] Done in C:\Users\arian\Development\OpenTelemetryExample\ScalaInstrumentation, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1029.6592ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.3055ms
[debug]   Load.loadUnit(file:/C:/Users/arian/Development/OpenTelemetryExample/ScalaInstrumentation/, ...) took 3948.6881ms
[debug] Load.apply: load took 3949.9542ms
[debug] Load.apply: resolveProjects took 0.079ms
[debug] Load.apply: finalTransforms took 23.9145ms
[debug] Load.apply: config.delegates took 0.2581ms
[debug] Load.apply: Def.make(settings)... took 55.6362ms
[debug] Load.apply: structureIndex took 13.9611ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to simple-tracing (in build file:/C:/Users/arian/Development/OpenTelemetryExample/ScalaInstrumentation/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(idea-shell, None, None)
